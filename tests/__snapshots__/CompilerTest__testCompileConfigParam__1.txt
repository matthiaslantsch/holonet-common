if (!isset($config) || !$config instanceof \holonet\common\collection\ConfigRegistry) {
	throw new \InvalidArgumentException('The config parameter must be an instance of \holonet\common\collection\ConfigRegistry');
}

$initialServices ??= array();

return new class($config, $initialServices) extends \holonet\common\di\Container {
	protected array $aliases = array(
		'container' => 'holonet\\common\\di\\Container',
		'registry' => 'holonet\\common\\collection\\ConfigRegistry',
	);
	
	protected array $services = array(
		0 => 'container',
		1 => 'registry',
	);
	
	protected function instance(string $class, array $params = array()): object {
		return match ($class) {
			holonet\common\tests\di\ServiceWithArrayConfigValue::class => $this->make_holonet_common_tests_di_ServiceWithArrayConfigValue($params),
			holonet\common\tests\di\OtherDependency::class => $this->make_holonet_common_tests_di_OtherDependency($params),
			holonet\common\tests\di\Dependency::class => $this->make_holonet_common_tests_di_Dependency($params),
			default => parent::instance($class, $params)
		};
	}
	
	protected function make_holonet_common_tests_di_ServiceWithArrayConfigValue(array $params): holonet\common\tests\di\ServiceWithArrayConfigValue {
		$params['value'] ??= $this->registry->get('config.just_an_array_value');
		return new holonet\common\tests\di\ServiceWithArrayConfigValue(...$params);
	}
	
	protected function make_holonet_common_tests_di_OtherDependency(array $params): holonet\common\tests\di\OtherDependency {
		$params['config'] ??= $this->registry->verifiedDto('service.other', 'holonet\common\tests\di\Config');
		return new holonet\common\tests\di\OtherDependency(...$params);
	}
	
	protected function make_holonet_common_tests_di_Dependency(array $params): holonet\common\tests\di\Dependency {
		$params['config'] ??= $this->registry->asDto('service.config', 'holonet\common\tests\di\Config');
		return new holonet\common\tests\di\Dependency(...$params);
	}
};