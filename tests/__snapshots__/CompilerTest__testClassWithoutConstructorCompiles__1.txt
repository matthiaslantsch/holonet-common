if (!isset($config) || !$config instanceof \holonet\common\collection\ConfigRegistry) {
	throw new \InvalidArgumentException('The config parameter must be an instance of \holonet\common\collection\ConfigRegistry');
}

$initialServices ??= array();

return new class($config, $initialServices) extends \holonet\common\di\Container {
	protected array $aliases = array(
		'container' => 'holonet\\common\\di\\Container',
		'registry' => 'holonet\\common\\collection\\ConfigRegistry',
	);
	
	protected array $services = array(
		0 => 'container',
		1 => 'registry',
	);
	
	protected function instance(string $class, array $params = array()): object {
		return match ($class) {
			holonet\common\tests\di\holonet_common_tests_CompilerTest_NoConstructorDependency::class => $this->make_holonet_common_tests_di_holonet_common_tests_CompilerTest_NoConstructorDependency($params),
			default => parent::instance($class, $params)
		};
	}
	
	protected function make_holonet_common_tests_di_holonet_common_tests_CompilerTest_NoConstructorDependency(array $params): holonet\common\tests\di\holonet_common_tests_CompilerTest_NoConstructorDependency {
		return new holonet\common\tests\di\holonet_common_tests_CompilerTest_NoConstructorDependency();
	}
};